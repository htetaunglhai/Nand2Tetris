//Set SP=256
@256
D=A
@SP
M=D

//Call Sys.init
// Save return address
@Sys.vm.Sys.init.Return.i
D=A
@SP
A=M
M=D
@SP
M=M+1

// Save [local, argument, this, that]
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1

@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1

@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1

@THAT
D=M
@SP
A=M
M=D
@SP
M= M+1

//Set argument
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D

//Set local
@SP
D=M
@LCL
M=D

//Goto function
@Sys.vm.Sys.init
0;JMP

//Declare a label for return address
(Sys.vm.Sys.init.Return.i)

//function Main.fibonacci 0
(Main.vm.Main.fibonacci)

//push argument 0
@ARG
A=M
D=A
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1

//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

//lt
@SP
M=M-1
@SP
A=M
D=M
@SP
A=M-1
A=M
D=A-D
@CLOOP.1
D;JLT
@SP
A=M-1
M=0
@END_CLOOP.1
0;JMP
(CLOOP.1)
@SP
A=M-1
M=-1
(END_CLOOP.1)

//if-goto IF_TRUE
@SP
A=M-1
D=M
@SP
M=M-1
@Main.vm.IF_TRUE
D;JNE

//goto IF_FALSE
@Main.vm.IF_FALSE
0;JMP

//label IF_TRUE
(Main.vm.IF_TRUE)

//push argument 0
@ARG
A=M
D=A
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1

//return
@SP
A=M
D=A-1
@SP
M=D
@ARG
A=M
D=A
@0
D=D+A
@R13
M=D
@SP
A=M
D=M
@R13
A=M
M=D
@LCL
D=M
@R13
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
A=D
0;JMP

//label IF_FALSE
(Main.vm.IF_FALSE)

//push argument 0
@ARG
A=M
D=A
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1

//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

//sub
@SP
M=M-1
@SP
A=M
D=M
@SP
A=M-1
A=M
D=A-D
@SP
A=M-1
M=D

//call Main.fibonacci 1
@Main.vm.Main.fibonacci.Return.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.vm.Main.fibonacci
0;JMP
(Main.vm.Main.fibonacci.Return.0)

//push argument 0
@ARG
A=M
D=A
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1

//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1

//sub
@SP
M=M-1
@SP
A=M
D=M
@SP
A=M-1
A=M
D=A-D
@SP
A=M-1
M=D

//call Main.fibonacci 1
@Main.vm.Main.fibonacci.Return.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.vm.Main.fibonacci
0;JMP
(Main.vm.Main.fibonacci.Return.1)

//add
@SP
M=M-1
@SP
A=M
D=M
@SP
A=M-1
A=M
D=A+D
@SP
A=M-1
M=D

//return
@SP
A=M
D=A-1
@SP
M=D
@ARG
A=M
D=A
@0
D=D+A
@R13
M=D
@SP
A=M
D=M
@R13
A=M
M=D
@LCL
D=M
@R13
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
A=D
0;JMP

//function Sys.init 0
(Sys.vm.Sys.init)

//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1

//call Main.fibonacci 1
@Main.vm.Main.fibonacci.Return.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.vm.Main.fibonacci
0;JMP
(Main.vm.Main.fibonacci.Return.2)

//label WHILE
(Sys.vm.WHILE)

//goto WHILE
@Sys.vm.WHILE
0;JMP

