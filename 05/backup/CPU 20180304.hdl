// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    False16(in=instruction, out=Fins); //All false instruction[16]
    Not(in=instruction[15], out=abit);
    ARegister(in=instruction, load=writeA, out=areg, out[0..14]=addressM); // A register & addressM
    
    Mux16(a=Fins, b=instruction, sel=instruction[15], out=inputx, out[11]=zx, out[10]=nx, out[9]=zy, out[8]=ny, out[7]=f, out[6]=no, out[5]=d1, out[4]=d2, out[3]=d3, out[2]=j1, out[1]=j2, out[0]=j3); // input x to ALU

    Mux16(a=Fins, b=dreg, sel=instruction[15], out=inputy); // input y to ALU

  
    ALU(x=inputx, y=inputy, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=aluout, zr=zr, ng=ng);
   

    Or16(a=aluout, b=aluout, out=outM); // outM
    Mux(a=false,b=true, sel=d3, out=writeM); //writeM
    DRegister(in=aluout, load=d2, out=dreg); // D register
    Or(a=abit, b=d1, out=writeA); // writeA

//pc[15]

    Nand(a=zr, b=ng, out=ps);    
    And(a=j1, b=j2, out=j12 );
    And(a=j12, b=j3, out= jtrue);

    And(a=j3, b=ps, out=jng);
    And(a=j2, b=zr, out=jzr);
    And(a=j1, b=ng, out=jps);

    And(a=jng, b=jzr, out=jngzr );
    And(a=jngzr, b=jps, out= loadpc);


    PC(in=areg,load=loadpc, inc=true, reset=reset, out=pcout, out[0..14]=pc); 





    
}