// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=insout);
    Not(in=instruction[15], out=notins15);
    Or(a=instruction[15], b=notins15, out=orins15);
    And(a=orins15, b=instruction[5], out=writeA);


    ARegister(in=insout, load=writeA, out=Areg, out[0..14]=addressM); //addressM

    Mux16(a=Areg,b=inM, sel=instruction[12], out=Ainput);


    ALU(x=Dreg,y=Ainput ,zx=instruction[6] ,nx=instruction[7] ,zy=instruction[8] ,ny=instruction[9] ,f=instruction[10] ,no=instruction[11] ,out=ALUout ,zr=zr ,ng=ng);

    Mux(a=false, b=true, sel=instruction[3], out=writeM); //writeM


    Mux(a=false, b=true, sel=instruction[4], out=writeD);
    DRegister(in=insout, load=writeD, out=Dreg);

    Or16(a=ALUout, b=ALUout, out=outM); // outM

    Nand(a=zr, b=ng, out=ps);    
    And(a=instruction[2], b=instruction[1], out=j12 );
    And(a=j12, b=instruction[0], out= jtrue);

    And(a=instruction[0], b=ps, out=jng);
    And(a=instruction[1], b=zr, out=jzr);
    And(a=instruction[2], b=ng, out=jps);

    And(a=jng, b=jzr, out=jngzr );
    And(a=jngzr, b=jps, out= loadpc);

    PC(in=Areg,load=loadpc, inc=true, reset=reset, out=pcout, out[0..14]=pc); // pc[15]

   
}